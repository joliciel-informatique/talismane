###################################
#### URLs and e-mail addresses ####
###################################
TokenRegexFilter(featureType=url)	\b((\w+[.-])*\w+@(\w+[.-])*\w+\.((aero)|(asia)|(biz)|(cat)|(com)|(coop)|(info)|(int)|(jobs)|(mobi)|(museum)|(name)|(net)|(org)|(pro)|(tel)|(travel)|(xxx)|(edu)|(gov)|(mil)|(ac)|(ad)|(ae)|(af)|(ag)|(ai)|(al)|(am)|(an)|(ao)|(aq)|(ar)|(as)|(at)|(au)|(aw)|(ax)|(az)|(ba)|(bb)|(bd)|(be)|(bf)|(bg)|(bh)|(bi)|(bj)|(bm)|(bn)|(bo)|(br)|(bs)|(bt)|(bv)|(bw)|(by)|(bz)|(ca)|(cc)|(cd)|(cf)|(cg)|(ch)|(ci)|(ck)|(cl)|(cm)|(cn)|(co)|(cr)|(cs)|(cu)|(cv)|(cx)|(cy)|(cz)|(dd)|(de)|(dj)|(dk)|(dm)|(do)|(dz)|(ec)|(ee)|(eg)|(eh)|(er)|(es)|(et)|(eu)|(fi)|(fj)|(fk)|(fm)|(fo)|(fr)|(ga)|(gb)|(gd)|(ge)|(gf)|(gg)|(gh)|(gi)|(gl)|(gm)|(gn)|(gp)|(gq)|(gr)|(gs)|(gt)|(gu)|(gw)|(gy)|(hk)|(hm)|(hn)|(hr)|(ht)|(hu)|(id)|(ie)|(il)|(im)|(in)|(io)|(iq)|(ir)|(is)|(it)|(je)|(jm)|(jo)|(jp)|(ke)|(kg)|(kh)|(ki)|(km)|(kn)|(kp)|(kr)|(kw)|(ky)|(kz)|(la)|(lb)|(lc)|(li)|(lk)|(lr)|(ls)|(lt)|(lu)|(lv)|(ly)|(ma)|(mc)|(md)|(me)|(mg)|(mh)|(mk)|(ml)|(mm)|(mn)|(mo)|(mp)|(mq)|(mr)|(ms)|(mt)|(mu)|(mv)|(mw)|(mx)|(my)|(mz)|(na)|(nc)|(ne)|(nf)|(ng)|(ni)|(nl)|(no)|(np)|(nr)|(nu)|(nz)|(om)|(pa)|(pe)|(pf)|(pg)|(ph)|(pk)|(pl)|(pm)|(pn)|(pr)|(ps)|(pt)|(pw)|(py)|(qa)|(re)|(ro)|(rs)|(ru)|(rw)|(sa)|(sb)|(sc)|(sd)|(se)|(sg)|(sh)|(si)|(sj)|(sk)|(sl)|(sm)|(sn)|(so)|(sr)|(ss)|(st)|(su)|(sv)|(sx)|(sy)|(sz)|(tc)|(td)|(tf)|(tg)|(th)|(tj)|(tk)|(tl)|(tm)|(tn)|(to)|(tp)|(tr)|(tt)|(tv)|(tw)|(tz)|(ua)|(ug)|(uk)|(us)|(uy)|(uz)|(va)|(vc)|(ve)|(vg)|(vi)|(vn)|(vu)|(wf)|(ws)|(ye)|(yt)|(yu)|(za)|(zm)|(zw)))\b	EmailAddressNamedEntity
TokenRegexFilter(featureType=url)	\b((((http)|(https)|(ftp)|(irc)|(ircs)|(gopher)|(telnet)|(nntp)|(worldwind)|(mailto)|(news)|(svn)|(git)|(mms)):\/\/)?(\w+[.-])*\w+\.((aero)|(asia)|(biz)|(cat)|(com)|(coop)|(info)|(int)|(jobs)|(mobi)|(museum)|(name)|(net)|(org)|(pro)|(tel)|(travel)|(xxx)|(edu)|(gov)|(mil)|(ac)|(ad)|(ae)|(af)|(ag)|(ai)|(al)|(am)|(an)|(ao)|(aq)|(ar)|(as)|(at)|(au)|(aw)|(ax)|(az)|(ba)|(bb)|(bd)|(be)|(bf)|(bg)|(bh)|(bi)|(bj)|(bm)|(bn)|(bo)|(br)|(bs)|(bt)|(bv)|(bw)|(by)|(bz)|(ca)|(cc)|(cd)|(cf)|(cg)|(ch)|(ci)|(ck)|(cl)|(cm)|(cn)|(co)|(cr)|(cs)|(cu)|(cv)|(cx)|(cy)|(cz)|(dd)|(de)|(dj)|(dk)|(dm)|(do)|(dz)|(ec)|(ee)|(eg)|(eh)|(er)|(es)|(et)|(eu)|(fi)|(fj)|(fk)|(fm)|(fo)|(fr)|(ga)|(gb)|(gd)|(ge)|(gf)|(gg)|(gh)|(gi)|(gl)|(gm)|(gn)|(gp)|(gq)|(gr)|(gs)|(gt)|(gu)|(gw)|(gy)|(hk)|(hm)|(hn)|(hr)|(ht)|(hu)|(id)|(ie)|(il)|(im)|(in)|(io)|(iq)|(ir)|(is)|(it)|(je)|(jm)|(jo)|(jp)|(ke)|(kg)|(kh)|(ki)|(km)|(kn)|(kp)|(kr)|(kw)|(ky)|(kz)|(la)|(lb)|(lc)|(li)|(lk)|(lr)|(ls)|(lt)|(lu)|(lv)|(ly)|(ma)|(mc)|(md)|(me)|(mg)|(mh)|(mk)|(ml)|(mm)|(mn)|(mo)|(mp)|(mq)|(mr)|(ms)|(mt)|(mu)|(mv)|(mw)|(mx)|(my)|(mz)|(na)|(nc)|(ne)|(nf)|(ng)|(ni)|(nl)|(no)|(np)|(nr)|(nu)|(nz)|(om)|(pa)|(pe)|(pf)|(pg)|(ph)|(pk)|(pl)|(pm)|(pn)|(pr)|(ps)|(pt)|(pw)|(py)|(qa)|(re)|(ro)|(rs)|(ru)|(rw)|(sa)|(sb)|(sc)|(sd)|(se)|(sg)|(sh)|(si)|(sj)|(sk)|(sl)|(sm)|(sn)|(so)|(sr)|(ss)|(st)|(su)|(sv)|(sx)|(sy)|(sz)|(tc)|(td)|(tf)|(tg)|(th)|(tj)|(tk)|(tl)|(tm)|(tn)|(to)|(tp)|(tr)|(tt)|(tv)|(tw)|(tz)|(ua)|(ug)|(uk)|(us)|(uy)|(uz)|(va)|(vc)|(ve)|(vg)|(vi)|(vn)|(vu)|(wf)|(ws)|(ye)|(yt)|(yu)|(za)|(zm)|(zw))((\/)?\/[\w%.#-]+)*\/?)(\?[\w%.#-_]+(=[\w%.#-/:_]*\w(&[\w%.#-_]+=[\w%.#-/:_]*)?\w)*)?\b	URLNamedEntity
TokenRegexFilter	[\.\?\!]{2,}	$0
########################
#### various quotes ####
########################
TokenRegexFilter	’	'
TokenRegexFilter	[“”„‟″‴]	"
TokenRegexFilter	(« )|«	"
TokenRegexFilter	( »)|»	"
TokenRegexFilter	``	"
TokenRegexFilter	''	"
#########################
#### various bullets ####
#########################
TokenRegexFilter	[•◦◘◙■□▢▣◆◇◈◉▪▫●○◎□▪▫◊○◌●◦•]	*
#### did n't
TokenRegexFilter(group=1)	\b([a-zA-Z]+)n't\b	$1
TokenRegexFilter(group=1)	\b[a-zA-Z]+(n't)\b	$1
### George's
TokenRegexFilter	'(s|re|ve|d|m|ll)\b
### O'Henry
TokenRegexFilter	\b[ODL]'[A-Z][A-Za-z]+\b
########################
#### 3/4 ###############
########################
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b\d+\\/\d+\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b\d+ \d+\\/\d+\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b\d+/\d+\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b\d+ \d+/\d+\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	[-+]\d+\\/\d+\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	[-+]\d+ \d+\\/\d+\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	[-+]\d+/\d+\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	[-+]\d+ \d+/\d+\b	999
#################
#### Numbers ####
#################
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b([Oo]ne|[Tt]wo|[Tt]hree|[Ff]our|[Ff]ive|[Ss]ix|[Ss]even|[Ee]ight|[Nn]ine|[Tt]en|[Ee]leven|[Tt]welve|[Tt]hirteen|[Ff]ourteen|[Ff]ifteen|[Ss]ixteen|[Ss]eventeen|[Ee]ighteen|[Nn]ineteen|[Tt]wenty|[Tt]hirty|[Ff]orty|[Ff]ifty|[Ss]ixty|[Ss]eventy|[Ee]ighty|[Nn]inety)(( |\-| and )(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|hundred|thousand|million|billion))*\b	two
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b[1-9][0-9]{0,2}(,[0-9]{3})+\.[0-9]+([eE][-+]?[0-9]+)?\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b[1-9][0-9]*\.[0-9]+([eE][-+]?[0-9]+)?\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b0\.[0-9]+([eE][-+]?[0-9]+)?\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b\.[0-9]+([eE][-+]?[0-9]+)?\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b([1-9][0-9]{0,2}(,[0-9]{3})+)\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	[-+][1-9][0-9]{0,2}(,[0-9]{3})+\.[0-9]+([eE][-+]?[0-9]+)?\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	[-+][1-9][0-9]*\.[0-9]+([eE][-+]?[0-9]+)?\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	[-+]0\.[0-9]+([eE][-+]?[0-9]+)?\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	[-+]\.[0-9]+([eE][-+]?[0-9]+)?\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	[-+]([1-9][0-9]{0,2}(,[0-9]{3})+)\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b(([1-9])|([12][0-9])|(3[01]))\b	999
TokenRegexFilter(featureType=date,lemmaType=originalLower)	\b([12][0-9][0-9][0-9])-([12][0-9][0-9][0-9])\b	1999-2000
TokenRegexFilter(featureType=date,lemmaType=originalLower)	\b([12][0-9][0-9][0-9])-([0-9][0-9])\b	1999-2000
TokenRegexFilter(featureType=date,lemmaType=originalLower)	\b([12][0-9][0-9][0-9])\b	1999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	\b\d+\b	999
TokenRegexFilter(featureType=number,lemmaType=originalLower)	[-+]\d+\b	999
### Initials
TokenRegexFilter	\b([A-Z]\.)+	$0
### 9:30
TokenRegexFilter(lemmaType=originalLower)	\b[12]?\d:\d\d\b	9:30
### AT&T
TokenRegexFilter	\b[A-Z]+&[A-Z]\b	$0
TokenRegexFilter(group=1)	\b((US|C|HK|NZ|AU)\$)[ ,.?!:;"'/\-\)\]\}]	$1
TokenRegexFilter	\b\w+\-\w+\b	$0
TokenRegexFilter	\.\.\.	$0
TokenRegexFilter	\(\.\.\.\)	$0
TokenRegexFilter(possibleSentenceBoundary=false)	\b(Mr|Mrs|Prof|Dr)\.	$0
TokenRegexFilter	\b(Jr|Sr|etc|Inc|Co|Ltd)\.	$0
TokenRegexFilter(possibleSentenceBoundary=false)	\b(Jan|Feb|Mar|Apr|Jun|Jul|Aug|Sep|Oct|Nov|Dec|Mon|Tue|Wed|Thu|Fri|Sat)\.	$0
TokenRegexFilter(possibleSentenceBoundary=false)	\bi\.e\.	$0
TokenRegexFilter(possibleSentenceBoundary=false)	\be\.g\.	$0

#########################
### Text normalisation ##
#########################
TextReplaceFilter	QuoteNormaliser	LowercaseKnownFirstWordFilter	UppercaseSeriesFilter

