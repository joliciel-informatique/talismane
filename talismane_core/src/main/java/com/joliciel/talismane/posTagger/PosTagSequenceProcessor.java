///////////////////////////////////////////////////////////////////////////////
//Copyright (C) 2014 Joliciel Informatique
//
//This file is part of Talismane.
//
//Talismane is free software: you can redistribute it and/or modify
//it under the terms of the GNU Affero General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//Talismane is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Affero General Public License for more details.
//
//You should have received a copy of the GNU Affero General Public License
//along with Talismane.  If not, see <http://www.gnu.org/licenses/>.
//////////////////////////////////////////////////////////////////////////////
package com.joliciel.talismane.posTagger;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.Writer;

import com.joliciel.talismane.Talismane;
import com.joliciel.talismane.Talismane.BuiltInTemplate;
import com.joliciel.talismane.TalismaneException;
import com.joliciel.talismane.TalismaneSession;
import com.joliciel.talismane.output.FreemarkerTemplateWriter;
import com.joliciel.talismane.utils.ConfigUtils;
import com.typesafe.config.Config;

/**
 * Any class that can process pos-tag sequences generated by the pos-tagger or
 * by manual annotation.
 * 
 * @author Assaf Urieli
 *
 */
public interface PosTagSequenceProcessor {
	/**
	 * Process the next pos-tag sequence, outputting to the writer provided.
	 */
	public void onNextPosTagSequence(PosTagSequence posTagSequence, Writer writer);

	/**
	 * Called when analysis is complete.
	 */
	public void onCompleteAnalysis();

	public static PosTagSequenceProcessor getProcessor(TalismaneSession session) throws IOException {
		Config config = session.getConfig();
		Config posTaggerConfig = config.getConfig("talismane.core.pos-tagger");

		Reader templateReader = null;
		String configPath = "talismane.core.pos-tagger.template";
		if (config.hasPath(configPath)) {
			templateReader = new BufferedReader(new InputStreamReader(ConfigUtils.getFileFromConfig(config, configPath)));
		} else {
			String templateName = null;
			BuiltInTemplate builtInTemplate = BuiltInTemplate.valueOf(posTaggerConfig.getString("built-in-template"));
			switch (builtInTemplate) {
			case standard:
				templateName = "posTagger_template.ftl";
				break;
			case with_location:
				templateName = "posTagger_template_with_location.ftl";
				break;
			case with_prob:
				templateName = "posTagger_template_with_prob.ftl";
				break;
			case with_comments:
				templateName = "posTagger_template_with_comments.ftl";
				break;
			default:
				throw new TalismaneException("Unknown builtInTemplate for pos-tagger: " + builtInTemplate.name());
			}

			String path = "output/" + templateName;
			InputStream inputStream = Talismane.class.getResourceAsStream(path);
			if (inputStream == null)
				throw new TalismaneException("Resource not found in classpath: " + path);
			templateReader = new BufferedReader(new InputStreamReader(inputStream));
		}

		FreemarkerTemplateWriter templateWriter = new FreemarkerTemplateWriter(templateReader);
		return templateWriter;
	}
}
